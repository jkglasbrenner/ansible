---
- hosts: workstation
  become: yes
  pre_tasks:
    - name: Load host_vars for local workstation
      include_vars: "host_vars/{{ ansible_hostname }}.yml"
      tags:
        - always

    - name: Update apt cache (Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 600
      when: ansible_distribution is match("Ubuntu")
      tags:
        - always

    - name: Ensure workstation groups exist
      group:
        name: "{{ item.name }}"
        system: "{{ item.system }}"
        state: present
      loop: "{{ workstation_groups | flatten(levels=1) }}"
      when: workstation_groups is defined
      tags:
        - always

    - name: Update user groups
      user:
        name: "{{ ansible_user }}"
        groups: "{{ workstation_user_groups }}"
        append: yes
      when: workstation_user_groups is defined
      tags:
        - always
  roles:
    - role: weareinteractive.apt
      when: workstation_run_apt_play
      tags:
        - packages
        - apt

    - role: wtanaka.slack
      when: workstation_run_slack_play
      tags:
        - communication
        - slack

    - role: jkglasbrenner.environment_modules
      when: workstation_run_environment_modules_play
      tags:
        - configuration
        - modules

    - role: franklinkim.ufw
      when: workstation_run_firewall_play
      tags:
        - firewall
        - security

    - role: joshualund.golang
      when: workstation_run_golang_play
      tags:
        - languages
        - go

    - role: jkglasbrenner.miniconda
      when: workstation_run_miniconda_play
      tags:
        - languages
        - python
        - miniconda
        - aiida

    - role: andrewrothstein.virtualbox
      when: workstation_run_virtualbox_play
      tags:
        - virtualization
        - virtualbox

    - role: andrewrothstein.vagrant
      when: workstation_run_vagrant_play
      tags:
        - virtualization
        - vagrant

    - role: angstwad.docker_ubuntu
      when: workstation_run_docker_play
      tags:
        - virtualization
        - docker
  tasks:
    - name: Install ripgrep
      apt:
        deb: "{{ ripgrep_deb_url }}"
      when: workstation_run_ripgrep_play
      tags:
        - packages
        - apt

    - name: Install toggl dependencies (Ubuntu 16.04)
      package:
        name: "{{ toggl_desktop_dependencies }}"
        state: present
      when:
        - workstation_run_toggl_play
        - ansible_distribution is match("Ubuntu")
        - ansible_distribution_version is version("16.04", "==")
      tags:
        - packages
        - apt

    - name: Install toggl desktop (Ubuntu 16.04)
      apt:
        deb: "{{ toggl_desktop_deb_url }}"
      when:
        - workstation_run_toggl_play
        - ansible_distribution is match("Ubuntu")
        - ansible_distribution_version is version("16.04", "==")
      tags:
        - packages
        - apt

    - name: Install toggl desktop (Ubuntu 18.04)
      apt:
        deb: "{{ item }}"
      loop: "{{ toggl_desktop_deb_urls | flatten(levels=1) }}"
      when:
        - workstation_run_toggl_play
        - ansible_distribution is match("Ubuntu")
        - ansible_distribution_version is version("18.04", ">=")
      tags:
        - packages
        - apt

    - name: Install RStudio
      apt:
        deb: "{{ rstudio_deb_url }}"
      when: workstation_run_rstudio_play
      tags:
        - packages
        - apt

    - name: Install pandoc
      apt:
        deb: "{{ pandoc_deb_url }}"
      when: workstation_run_pandoc_play
      tags:
        - packages
        - apt

    - name: Install imaginary teleprompter
      apt:
        deb: "{{ imaginary_teleprompter_deb_url }}"
      when: workstation_run_imaginary_teleprompter_play
      tags:
        - packages
        - video
        - apt

    - name: Install libgocanvas-common and libgocanvas3 (Ubuntu 18.04)
      apt:
        deb: "{{ item }}"
      loop: "{{ shutter_ubuntu1804_dependencies_deb_urls | flatten(levels=1) }}"
      when:
        - ansible_distribution is match("Ubuntu")
        - ansible_distribution_version is version("18.04", ">=")
      tags:
        - packages
        - apt

    - name: Check installation status of texlive
      stat:
        path: "{{ texlive_dir }}/{{ texlive_version }}/bin/x86_64-linux/pdftex"
      register: texlive_pdftex
      when: workstation_run_texlive_installer_play
      tags:
        - packages
        - latex
        - install_script

    - name: Download and unarchive texlive installer archive
      unarchive:
        src: "{{ texlive_url }}"
        dest: "/tmp/"
        remote_src: yes
        creates: "{{ texlive_dir }}/{{ texlive_version }}/bin/x86_64-linux/pdftex"
      when: workstation_run_texlive_installer_play
      tags:
        - packages
        - latex
        - install_script

    - name: Generate texlive.profile file
      template:
        src: "templates/texlive.profile.j2"
        dest: "{{ texlive_installer_dir }}/texlive.profile"
        mode: 0644
      when:
        - workstation_run_texlive_installer_play
        - not texlive_pdftex.stat.exists
      tags:
        - packages
        - latex
        - install_script

    - name: Run texlive installer script
      command: "./install-tl --profile=texlive.profile"
      args:
        chdir: "{{ texlive_installer_dir }}" 
      when:
        - workstation_run_texlive_installer_play
        - not texlive_pdftex.stat.exists
      tags:
        - packages
        - latex
        - install_script

    - name: Remove texlive installer directory
      file:
        path: "{{ texlive_installer_dir }}" 
        state: absent
      when: workstation_run_texlive_installer_play
      tags:
        - packages
        - latex
        - install_script

- hosts: workstation
  remote_user: "{{ workstation_user }}"
  pre_tasks:
    - name: Load host_vars for local workstation
      include_vars: "host_vars/{{ ansible_hostname }}.yml"
      tags:
        - always

  tasks:
    - name: Check if Node Version Manager (NVM) is installed
      stat:
        path: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
      register: nvm_sh_script
      when:
        - workstation_run_nvm_play
      tags:
        - packages
        - install_script

    - name: Download Node Version Manager (NVM) installer script
      get_url:
        url: "{{ nvm_script_url }}"
        dest: /tmp/nvm_install.sh
        mode: 0755
      when:
        - workstation_run_nvm_play
        - not nvm_sh_script.stat.exists
      tags:
        - packages
        - install_script

    - name: Run Node Version Manager installer script
      command: ./nvm_install.sh
      args:
        chdir: /tmp/
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
      when: workstation_run_nvm_play
      tags:
        - packages
        - install_script

    - name: Remove Node Version Manager installer script
      file:
        path: "/tmp/nvm_install.sh"
        state: absent
      when: workstation_run_nvm_play
      tags:
        - packages
        - install_script

    - name: JetBrains Toolbox
      unarchive:
        src: "{{ jetbrains_toolbox_url }}"
        dest: "/tmp/"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/share/JetBrains/Toolbox/bin/jetbrains-toolbox"
      when: workstation_run_jetbrains_play
      tags:
        - packages
        - apt

    - name: Run JetBrains Installer
      command: "/tmp/{{ jetbrains_toolbox_filename | quote }}/jetbrains-toolbox"
      args:
        creates: "{{ ansible_env.HOME }}/.local/share/JetBrains/Toolbox/bin/jetbrains-toolbox"
      when: workstation_run_jetbrains_play
      tags:
        - packages
        - apt

    - name: Remove JetBrains Toolbox installer
      file:
        path: "/tmp/{{ jetbrains_toolbox_filename }}/"
        state: absent
      when: workstation_run_jetbrains_play
      tags:
        - packages
        - apt
...
